#!/usr/bin/perl -w
use strict;
use warnings;

=head1 NAME

krang_farm_build - create builds on the krang farm

=head1 SYNOPSIS

Create a build of Krang v1.018 on each farm machine:

  $ krang_farm_build krang-1.018-src.tar.gz

Create a build of Krang v1.018 on just the Redhat7_3 machine:

  $ krang_farm_build --machine Redhat7_3 krang-1.018-src.tar.gz

Create builds from the source in CVS:

  $ krang_farm_build --from-cvs

=head1 LOGGING

This script will write to a log for each machine called
'build.$NAME.log' in the log/ directory.

=head1 OPTIONS

=over

=item --machine

Specify a particular machine to build against.  Otherwise the build
will run against all machines.  May be repeated.

=item --perl

Specify a particular Perl to build with.  This must be one of the Perl
binaries configured in the C<Perls> line in F<farm.conf>.  Otherwise
all Perls will be used.  May not be repeated.

=item --from-cvs

Instead of passing in a source tar-ball, the latest source from CVS
will be used.

=item --no-shutdown

Leave the machine(s) running after the test run is finished.  Useful
when debugging a failed run.  You'll have to manually shutdown the
running machines before the next run.

=back

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs);
use FindBin qw($RealBin);

BEGIN {
    # Find a KRANGFARM_ROOT based on path to bin
    my @dir = splitdir($RealBin);
    $ENV{KRANGFARM_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);

    # use $KRANGFARM_ROOT/lib for modules
    my $lib    = catdir($ENV{KRANGFARM_ROOT}, "lib");
    $ENV{PERL5LIB} = $ENV{PERL5LIB} ? "$ENV{PERL5LIB}:${lib}" : 
      "${lib}";
    unshift @INC, $lib;

    # load KrangFarm::Conf
    eval { require KrangFarm::Conf };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load KrangFarm::Conf.

Error message:

$@

######################################################################
END
}

use KrangFarm::Machine;
use Cwd qw(cwd);
use File::Temp qw(tempdir);

# process options
use Getopt::Long;
use Pod::Usage;

my ($help, $man, @machines, $src, @machine_names, $from_cvs, $no_shutdown, $which_perl);
pod2usage(2) unless
  GetOptions(help       => \$help,
             man        => \$man,
             'machine=s' => \@machine_names,
             'from-cvs'  => \$from_cvs,
             'no-shutdown' => \$no_shutdown,
             'perl=s'    => \$which_perl,
            );
pod2usage(1)             if $help;
pod2usage(-verbose => 2) if $man;

# get input source file
$src = shift(@ARGV);
pod2usage("Missing source filename command-line parameter!\n")
  unless $src or $from_cvs;
pod2usage("Source filename cannot be combined with --from-cvs!\n")
  if $src and $from_cvs;

# pull latest source from cvs
if ($from_cvs) {
    # make a fresh checkout of Krang
    my $temp = tempdir(CLEANUP => 1);
    print "Checking out Krang in temp directory...\n";
    
    # login to CVS server
    my $command = Expect->spawn("cvs -d:pserver:anonymous\@krang-cvs.thepirtgroup.com:/usr/local/krang-cvs login") or die "Unable to login is CVS server: $!";
    $command->log_stdout(0);
    $command->send("\n") if $command->expect(5, 'password:');
    $command->soft_close();

    # checkout krang
    my $orig = cwd;
    chdir($temp) or die $!;
    system('cvs -d:pserver:anonymous\@krang-cvs.thepirtgroup.com:/usr/local/krang-cvs -z3 co krang > /dev/null 2>&1') and
      die "Unable to checkout krang from CVS: $?";
    print "Checkout complete.\n";
    
    # make a source dist and copy it back where we came from
    chdir("krang") 
      or die $!;
    system("make dist") 
      && die "Failed to make dist: $?";
    ($src) = <krang-*-src.tar.gz>;
    system("mv $src $orig")
      && die "Failed to mv krang-*-src.tar.gz $orig: $?";

    chdir($orig) or die $!;
}

# validate filename
die "Specified file '$src' does not exist.\n" unless -e $src;

# make sure that's it
pod2usage("Unrecognized options to krang_farm_build: '" 
          . join(' ', @ARGV) . "'\n")
  if @ARGV;

# resolve machines list
if (@machine_names) {
    my @all = KrangFarm::Machine->list;
    foreach my $name (@machine_names) {
        my ($machine) = grep { $_ eq $name } @all;
        die "Machine named '$name' not found in farm.conf!\n" 
          unless $machine;
        push(@machines, $machine);
    }                
} else {
    @machines = KrangFarm::Machine->list;
}

# run over list of machines starting them up and running a build
foreach my $name (@machines) {
    my $machine = 
      KrangFarm::Machine->new(name => $name,
                              log  => catfile($ENV{KRANGFARM_ROOT}, 'log', 
                                              "build.$name.log"));
    print "\n" . "*"x50 . 
      "\nBuilding on ". $machine->name .
        " (" . $machine->description . ")\n";

    # start up
    $machine->start();

    eval {
        # send source tarball
        $machine->send_file(file => $src);
        
        # untar it
        my ($file) = $src =~ m!([^/]+)$!;
        $machine->run(command => "tar xzf $file");
        
        my $perls = $machine->perls;
        foreach my $perl (keys %$perls) {
            next if $which_perl and $perl ne $which_perl; 
            my $arch = $perls->{$perl};
            my ($dir) = $file =~ m!(.*)\.tar\.gz$!;

            # run a make clean
            $machine->run(command => "make -C $dir clean");

            # run a make build
            print "   Starting '$perl krang_build' at " . localtime() . "\n";
            my $build = 
              $machine->spawn(command => "$perl $dir/bin/krang_build");
        
            # wait for "Build complete!" message
            my $complete = 0;
            if ($build->expect(undef, 
                               "Build complete!")) {
                $complete = 1;
            }
            die "Build on '" . $machine->name ."' failed.  " .
              "Check log/build." . $machine->name . ".log for details.\n"
                unless $complete;
            $machine->log(" : Build complete!");
            print "   Finished '$perl krang_build' at " . localtime() . "\n";
            
            # shut it down
            $build->expect(undef);
            $build->soft_close();
            
            # now do a make dist
            $build = $machine->spawn(command => 
                                     "$perl $dir/bin/krang_makedist");
            my $dist;
            if ($build->expect(undef, 
                               '-re', 
                               "Distribution complete in .*?\\.tar\\.gz")) {
                $dist = 1;
            }
            die "Make dist on '" . $machine->name . "' failed.  " .
              "Check log/build." . $machine->name . ".log for details.\n"
                unless $dist;
            $machine->log(" : Dist complete!");
        
            # retrieve the built distribution, should be
            # krang-X.XXX-$arch.tar.gz
            my $dist_file = $file;
            $dist_file =~ s!src!$arch!;
            $machine->fetch_file(file => "$dist_file");
            print "   Retrieved $dist_file.\n";
            $machine->log(" : Retrieved $dist_file.");
        }
        
    };
    my $err = $@;

    # shut down machine, no matter what happened
    $machine->stop()
        unless $no_shutdown;
    
    # print an error if something broke
    die $err if $err;
}
