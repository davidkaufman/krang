#!/usr/bin/env perl
use warnings;
use strict;

=pod

=head1 NAME

krang_to_utf8 - utf8 conversion helper

=head1 SYNOPSIS

This script runs all the necessary programs and makes the necessary 
configuration changes to convert an entire Krang installation to UTF8.

    krang_to_utf8 --no-backup --remove-old-versions --verbose

=head1 DESCRIPTION

This script will convert your Krang installation to UTF8.

=head1 OPTIONS

The script takes the following options:

=over

=item --no-prompt

Do not prompt user for any confirmation.

=item --no-backup

Do not back up the entire installation before proceeding.

=item --remove-old-versions

Prune all but the latest (converted) versions of stories, media and template to prevent ISEs when Reverting.

=over

=cut

use File::Spec::Functions qw(catdir catfile splitdir rel2abs canonpath);
use FindBin qw($RealBin);
use Config;

BEGIN {

    # Find a KRANG_ROOT based on path to bin
    my @dir = splitdir(canonpath($RealBin));
    $ENV{KRANG_ROOT} ||= catdir(@dir[0 .. $#dir - 1]);

    # use $KRANG_ROOT/lib for modules
    my $lib = catdir($ENV{KRANG_ROOT}, "lib");
    $ENV{PERL5LIB} =
      $ENV{PERL5LIB}
      ? "$ENV{PERL5LIB}:${lib}"
      : "${lib}";
    unshift @INC, $lib, "$lib/" . $Config{archname};

    eval { require Krang::Conf };
    warn << "END" and exit(1) if $@;
######################################################################

Cannot load Krang.

Error message:

$@

######################################################################
END

    # add in $KRANG_ROOT/platform for platform build modules
    my $plib = catdir($ENV{KRANG_ROOT}, "platform");
    $ENV{PERL5LIB} = "$ENV{PERL5LIB}:${plib}";
    unshift @INC, $plib;
}

use Pod::Usage;
use Getopt::Long;
use Term::Prompt qw(prompt);

my ($from, $to, $help, $man, $v, $no_prompt, $no_backup, $remove_old_versions);
GetOptions(
    'no-prompt'           => \$no_prompt,
    'no-backup'           => \$no_backup,
    'remove-old-versions' => \$remove_old_versions,
    'help'                => \$help,
    'man'                 => \$man,
    'verbose'             => \$v,
) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;

use Krang::ClassFactory qw(pkg);
use Krang::ClassLoader 'Charset';
use Krang::ClassLoader 'Script';

unless ($no_prompt) {
    exit 1      
    unless prompt("y", "\nThis program will stop krang, convert the entire database of every instance to UTF-8, and update krang.conf\n\nAre you sure you want to proceed?", "y/n", "y");
}

if (pkg('Charset')->is_utf8) {
    print "\nI'm confused: your krang.conf file already specifies UTF8 as the character set.\n\nIf this is a recent change and you haven't actually converted or saved any data since making it, please revert the change and re-run this script.\n\n";
    exit;
}

my $verbose = ($v ? '--verbose' : '');
my $bin = catdir($ENV{KRANG_ROOT}, "bin");

my $old_charset = pkg('Charset')->mysql_charset;
unless ($old_charset || $no_prompt) {
    unless (prompt("y","\nYour krang.conf has no character set specified.\nIs it safe to assume your data is stored in Latin1 (i.e. ISO-8859 or Windows-1252)?","y/n","y")) {
	print "\nPlease add the line \"Charset <YOUR_OLD_CHARACTER_SET>\" to krang.conf and rerun this script.\n\n";
	exit;
    }
}
$old_charset ||= "latin1";

print "\nSTOPPING KRANG\n\n";
system ("$bin/krang_ctl stop");

unless ($no_backup) {
    print "\nBACKING UP EVERYTHING\n\n";
    if (system ("$bin/krang_backup $verbose")) {
	print "\nBACKUP FAILED: UTF8 UPGRADE ABORTED\n\n";
	exit;
    }
}

print "\nCONVERTING DATA TO UTF8\n\n";
if (system ("$bin/krang_charset_convert_data --all-instances --from $old_charset --to utf8 $verbose")) {
    print "\nDATA-CONVERSION FAILED: UTF8 UPGRADE INCOMPLETE (YOU MAY NEED TO RESTORE BACKUP!)\n\n";
    exit;
}

print "\nCONVERTING TABLE DEFINITIONS TO UTF8\n\n";  # skip history - it's huge and only has ASCII anyway
if (system ("$bin/krang_charset_convert_tables --all-instances --to utf8 --skip-table history $verbose")) {
    print "\nTABLE-CONVERSION FAILED: UTF8 UPGRADE INCOMPLETE (YOU MAY NEED TO RESTORE BACKUP!)\n\n";
    exit;
}

my $krang_conf_file = catfile($ENV{KRANG_ROOT}, "conf", "krang.conf");
unless (-e $krang_conf_file) {
    print "\nCOULDN'T FIND KRANG.CONF! PLEASE LOCATE IT AND ADD THE LINE 'CHARSET UTF8'; ASSUMING THERE WERE NO OTHER ERRORS, YOUR DATA AND TABLES SHOULD NOW BE CONVERTED.\n\n";
    print "THE ERROR DID PREVENT DELETION OF OLD VERSIONS: AFTER CHANGING KRANG.CONF, SEE BIN/KRANG_PRUNE_VERSIONS TO ACCOMPLISH THIS MANUALLY.\n\n" if $remove_old_versions;
    exit;
}

my $output;
open KRANG_CONF, "<$krang_conf_file"; 
my $added_charset;
while (<KRANG_CONF>) {
    if ($_ =~ /^\s*\#*\s*Charset\s/i) {
	chomp($_);
	if ($added_charset++) {
	    print "\nREMOVING '$_' FROM $krang_conf_file\n";
	} else {
	    print "\nREPLACING '$_' WITH 'Charset UTF-8' IN $krang_conf_file\n";
	    $output .= "Charset UTF-8\n";
	}
    } else {
	$output .= $_;
    }
}
unless ($added_charset) {
    print "\nADDING 'Charset UTF-8' AT THE END OF $krang_conf_file\n";
    $output =~ s/\s+$//;
    $output .= "\n\nCharset UTF-8\n";
}
close KRANG_CONF;
open KRANG_CONF, "> $krang_conf_file";
print KRANG_CONF $output;
close KRANG_CONF;

my $versions;
if ($remove_old_versions) {
    print "\nREMOVING OLD VERSIONS OF STORIES, TEMPLATES, AND MEDIA OBJECTS FROM DATABASE\n";
    $versions = 1;
} else {
    print "\nADDING LATEST VERSION OF STORIES, TEMPLATES, AND MEDIA OBJECTS TO VERSION TABLES\n(THIS CALL TO KRANG_PRUNE_VERSIONS WILL NOT ACTUALLY DELETE ANYTHING, JUST UPDATE THE VERSION TABLES)\n";
    $versions = 999999;
}

if (system ("$bin/krang_prune_versions --all-instances --first-resave --versions-per-media $versions --versions-per-story $versions --versions-per-template $versions $verbose")) {
    print "KRANG_PRUNE_VERSIONS FAILED: NOT THE END OF THE WORLD; YOU CAN RUN THIS BY HAND LATER.\n(MAKE SURE TO USE THE '--first-resave' ARGUMENT)\n";
}

print "\nRE-STARTING KRANG\n\n";
system ("$bin/krang_ctl start");

print "\nUTF8 UPGRADE COMPLETE!\n\nASSUMING NO ERRORS ABOVE, ALL YOU HAVE TO DO NOW IS MAKE SURE YOUR\nCATEGORY TEMPLATES AND/OR SERVER CONFIGURATION INCLUDE A UTF8 HEADER\n(e.g. \"Content-Type: text/html; charset=utf-8\") AND THEN RE-PUBLISH!\n\n";
